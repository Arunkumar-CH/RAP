Behaviour:

managed implementation in class zcl_bp_travel_m_xx unique;
with draft;

define behavior for zI_TRAVEL_M_XX alias Travel
persistent table /dmo/travel
draft table zdtravel_xx
with additional save
lock master
total etag LastChangedAt
authorization master ( instance, global )
etag master lastchangedat
early numbering
{
  create;
  update;
  delete;
  association _Booking { create; with draft; }

  draft determine action Prepare  {
    validation validateCustomer;
    validation validateDates;
    validation validateStatus;
  }

  action createTravelByTemplate result [1] $self;

  // administrative fields: read only
  field ( readonly ) lastchangedat, lastchangedby, createdat, createdby;

  // mandatory fields that are required to create a travel
  field ( mandatory ) agency_id, status, booking_fee, currency_code;


  // dynamic field control
  field ( features : instance ) travel_id;

  // dynamic action control
  action ( features : instance ) acceptTravel result [1] $self;
  action ( features : instance ) rejectTravel result [1] $self;

  validation validateCustomer on save { field customer_id; create; }
  validation validateDates on save { field begin_date, end_date; create; }
  validation validateStatus on save { field status; }
  //    determination calculateTotalFlightPrice on save { field currency_code; }


}

define behavior for ZI_BOOKING_M_XX alias booking
implementation in class zcl_bp_booking_m_xx unique
draft table zdbook_xx
//    persistent table /dmo/booking
with unmanaged save
lock dependent by _Travel
authorization dependent by _Travel
early numbering
etag master lastchangedat
{
  update;
  delete;

  // static field control
  field ( mandatory ) carrier_id, connection_id, flight_date;
  field ( readonly ) travel_id;
  //  action acceptTravel result [1] $self;

  // dynamic field control
  field ( features : instance ) booking_id, booking_date, customer_id;

  determination calculateTotalFlightPrice on modify { field flight_price, currency_code; create; }
  association _Travel { with draft; }

}

Travel Class:

*"* use this source file for the definition and implementation of
*"* local helper classes, interface definitions and type
*"* declarations
CLASS lhc_travel DEFINITION INHERITING FROM cl_abap_behavior_handler.

  PRIVATE SECTION.


    METHODS copy_travel FOR MODIFY IMPORTING keys FOR ACTION travel~createTravelByTemplate RESULT result.

    METHODS set_status_completed FOR MODIFY IMPORTING keys FOR ACTION travel~acceptTravel  RESULT result.

    METHODS reject_travel FOR MODIFY IMPORTING keys FOR ACTION travel~rejectTravel  RESULT result.

    METHODS get_features FOR FEATURES IMPORTING keys REQUEST requested_features FOR travel RESULT result.


    METHODS get_instance_authorizations FOR INSTANCE AUTHORIZATION
      IMPORTING keys REQUEST requested_authorizations FOR Travel RESULT result.

    METHODS get_global_authorizations FOR GLOBAL AUTHORIZATION
      IMPORTING REQUEST requested_authorizations FOR Travel RESULT result.
    METHODS validateCustomer FOR VALIDATE ON SAVE
      IMPORTING keys FOR Travel~validateCustomer.

    METHODS validateDates FOR VALIDATE ON SAVE
      IMPORTING keys FOR Travel~validateDates.

    METHODS validateStatus FOR VALIDATE ON SAVE
      IMPORTING keys FOR Travel~validateStatus.
    METHODS earlynumbering_cba_Booking FOR NUMBERING
      IMPORTING entities FOR CREATE Travel\_Booking.
    METHODS earlynumbering_create FOR NUMBERING
      IMPORTING entities FOR CREATE Travel.


ENDCLASS.


CLASS lhc_travel IMPLEMENTATION.


  METHOD copy_travel.



    SELECT MAX( travel_id ) FROM /dmo/travel INTO @DATA(lv_travel_id). "#EC CI_NOWHERE

    READ ENTITIES OF zi_travel_m_xx IN LOCAL MODE
      ENTITY travel
         FIELDS ( travel_id
                  agency_id
                  customer_id
                  booking_fee
                  total_price
                  currency_code )
           WITH CORRESPONDING #( keys )
         RESULT    DATA(lt_read_result)
         FAILED    failed
         REPORTED  reported.

    DATA(lv_today) = cl_abap_context_info=>get_system_date( ).

    DATA lt_create TYPE TABLE FOR CREATE ZI_Travel_M_XX\\travel.

    lt_create = VALUE #( FOR row IN  lt_read_result INDEX INTO idx

                             ( %cid = row-travel_id
                               travel_id      = lv_travel_id + idx
                               agency_id      = row-agency_id
                               customer_id    = row-customer_id
                               begin_date     = lv_today
                               end_date       = lv_today + 30
                               booking_fee    = row-booking_fee
                               total_price    = row-total_price
                               currency_code  = row-currency_code
                               description    = 'Enter your comments here'
                               status = 'O' ) ). " Open


    MODIFY ENTITIES OF zi_travel_m_xx IN LOCAL MODE
        ENTITY travel
           CREATE FIELDS (    travel_id
                              agency_id
                              customer_id
                              begin_date
                              end_date
                              booking_fee
                              total_price
                              currency_code
                              description
                              status )
           WITH lt_create
         MAPPED   mapped
         FAILED   DATA(failed_modify)
         REPORTED DATA(reported_modify).

    failed-travel   = CORRESPONDING #( BASE ( failed-travel )   failed_modify-travel   MAPPING travel_id = %cid ).
    reported-travel = CORRESPONDING #( BASE ( reported-travel ) reported_modify-travel MAPPING travel_id = %cid ).


    READ ENTITIES OF zi_travel_m_xx IN LOCAL MODE
      ENTITY travel
        ALL FIELDS WITH
        CORRESPONDING #( mapped-travel )
    RESULT DATA(lt_read_created).

    result = VALUE #( FOR key IN  mapped-travel  INDEX INTO idx
                               ( %cid_ref = keys[ KEY entity %key = key-%cid ]-%cid_ref
                                 %key     = key-%cid
                                 %param-%tky   = key-%tky ) ) .

    result = CORRESPONDING #( result FROM lt_read_created USING KEY entity  %key = %param-%key MAPPING %param = %data EXCEPT * ).





  ENDMETHOD.

  METHOD set_status_completed.



    MODIFY ENTITIES OF zi_travel_m_xx IN LOCAL MODE
 ENTITY Travel
   UPDATE FIELDS (  status )
   WITH VALUE #( FOR key IN keys ( %tky          = key-%tky
                                   status = 'A' ) )
FAILED failed
REPORTED reported.

    "Read changed data for action result
    READ ENTITIES OF zi_travel_m_xx IN LOCAL MODE
      ENTITY Travel
        ALL FIELDS WITH
        CORRESPONDING #( keys )
      RESULT DATA(lt_travel).

    result = VALUE #( FOR travel IN lt_travel ( %tky   = travel-%tky
                                                %param = travel ) ).

  ENDMETHOD.

  METHOD reject_travel.

    " Modify in local mode
    MODIFY ENTITIES OF zi_travel_m_xx IN LOCAL MODE
 ENTITY Travel
   UPDATE FIELDS (  status )
   WITH VALUE #( FOR key IN keys ( %tky          = key-%tky
                                   status = 'X' ) )
FAILED failed
REPORTED reported.

    "Read changed data for action result
    READ ENTITIES OF zi_travel_m_xx IN LOCAL MODE
      ENTITY Travel
        ALL FIELDS WITH
        CORRESPONDING #( keys )
      RESULT DATA(lt_travel).

    result = VALUE #( FOR travel IN lt_travel ( %tky   = travel-%tky
                                                %param = travel ) ).

  ENDMETHOD.

  METHOD get_features.

    READ ENTITIES OF zi_travel_m_xx IN LOCAL MODE
    ENTITY Travel
    FIELDS ( status )
    WITH CORRESPONDING #( keys )
    RESULT DATA(lt_travel_result)
    FAILED failed.

    result = VALUE #( FOR ls_travel IN lt_travel_result
                       (         %tky                   = ls_travel-%tky

                         %field-travel_id               = COND #( WHEN ls_travel-travel_id IS NOT INITIAL
                                                                    THEN if_abap_behv=>fc-f-read_only ELSE if_abap_behv=>fc-f-mandatory  )
                         %features-%action-rejectTravel = COND #( WHEN ls_travel-status = 'X'
                                                                    THEN if_abap_behv=>fc-o-disabled ELSE if_abap_behv=>fc-o-enabled  )
                         %features-%action-acceptTravel = COND #( WHEN ls_travel-status = 'A'
                                                                    THEN if_abap_behv=>fc-o-disabled ELSE if_abap_behv=>fc-o-enabled  )
                      ) ).

  ENDMETHOD.






  METHOD get_instance_authorizations.
  ENDMETHOD.

  METHOD get_global_authorizations.
  ENDMETHOD.

  METHOD validateCustomer.

    READ ENTITIES OF ZI_Travel_M_XX IN LOCAL MODE
        ENTITY Travel
          FIELDS ( customer_id )
          WITH CORRESPONDING #( keys )
        RESULT DATA(lt_travel)
        FAILED DATA(lt_failed).

    failed =  CORRESPONDING #( DEEP lt_failed  ).

    DATA lt_customer TYPE SORTED TABLE OF /dmo/customer WITH UNIQUE KEY customer_id.

    " Optimization of DB select: extract distinct non-initial customer IDs
    lt_customer = CORRESPONDING #( lt_travel DISCARDING DUPLICATES MAPPING customer_id = customer_id EXCEPT * ).
    DELETE lt_customer WHERE customer_id IS INITIAL.

    IF  lt_customer IS NOT INITIAL.
      " Check if customer ID exists
      SELECT FROM /dmo/customer FIELDS customer_id
                                FOR ALL ENTRIES IN @lt_customer
                                WHERE customer_id = @lt_customer-customer_id
      INTO TABLE @DATA(lt_customer_db).
    ENDIF.

    " Raise message for non existing customer id
    LOOP AT lt_travel INTO DATA(ls_travel).

      APPEND VALUE #(  %tky                 = ls_travel-%tky
                       %state_area          = 'VALIDATE_CUSTOMER' ) TO reported-travel.

      IF ls_travel-customer_id IS  INITIAL.
        APPEND VALUE #( %tky = ls_travel-%tky ) TO failed-travel.

        APPEND VALUE #( %tky                = ls_travel-%tky
                        %state_area         = 'VALIDATE_CUSTOMER'
                        %msg                = NEW /dmo/cm_flight_messages(
                                                                textid = /dmo/cm_flight_messages=>enter_customer_id
                                                                severity = if_abap_behv_message=>severity-error )
                        %element-customer_id = if_abap_behv=>mk-on ) TO reported-travel.

      ELSEIF ls_travel-customer_id IS NOT INITIAL AND NOT line_exists( lt_customer_db[ customer_id = ls_travel-customer_id ] ).
        APPEND VALUE #(  %tky = ls_travel-%tky ) TO failed-travel.

        APPEND VALUE #(  %tky                = ls_travel-%tky
                         %state_area         = 'VALIDATE_CUSTOMER'
                         %msg                = NEW /dmo/cm_flight_messages(
                                                                customer_id = ls_travel-customer_id
                                                                textid = /dmo/cm_flight_messages=>customer_unkown
                                                                severity = if_abap_behv_message=>severity-error )
                         %element-customer_id = if_abap_behv=>mk-on ) TO reported-travel.
      ENDIF.

    ENDLOOP.
  ENDMETHOD.

  METHOD validateDates.
    READ ENTITIES OF ZI_Travel_M_XX IN LOCAL MODE
     ENTITY Travel
       FIELDS (  begin_date end_date travel_id )
       WITH CORRESPONDING #( keys )
     RESULT DATA(lt_travel)
     FAILED DATA(lt_failed).

    failed =  CORRESPONDING #( DEEP lt_failed  ).

    LOOP AT lt_travel INTO DATA(ls_travel).

      APPEND VALUE #(  %tky               = ls_travel-%tky
                       %state_area          = 'VALIDATE_DATES' ) TO reported-travel.

      IF ls_travel-begin_date IS INITIAL.
        APPEND VALUE #( %tky = ls_travel-%tky ) TO failed-travel.

        APPEND VALUE #( %tky               = ls_travel-%tky
                        %state_area        = 'VALIDATE_DATES'
                         %msg                = NEW /dmo/cm_flight_messages(
                                                                textid = /dmo/cm_flight_messages=>enter_begin_date
                                                                severity = if_abap_behv_message=>severity-error )
                        %element-begin_date = if_abap_behv=>mk-on ) TO reported-travel.
      ENDIF.
      IF ls_travel-end_date IS INITIAL.
        APPEND VALUE #( %tky = ls_travel-%tky ) TO failed-travel.

        APPEND VALUE #( %tky               = ls_travel-%tky
                        %state_area        = 'VALIDATE_DATES'
                         %msg                = NEW /dmo/cm_flight_messages(
                                                                textid = /dmo/cm_flight_messages=>enter_end_date
                                                                severity = if_abap_behv_message=>severity-error )
                        %element-end_date   = if_abap_behv=>mk-on ) TO reported-travel.
      ENDIF.
      IF ls_travel-end_date < ls_travel-begin_date AND ls_travel-begin_date IS NOT INITIAL
                                                 AND ls_travel-end_date IS NOT INITIAL.
        APPEND VALUE #( %tky = ls_travel-%tky ) TO failed-travel.

        APPEND VALUE #( %tky               = ls_travel-%tky
                        %state_area        = 'VALIDATE_DATES'
                        %msg               = NEW /dmo/cm_flight_messages(
                                                                textid = /dmo/cm_flight_messages=>begin_date_bef_end_date
                                                                begin_date = ls_travel-begin_date
                                                                end_date   = ls_travel-end_date
                                                                severity = if_abap_behv_message=>severity-error )
                        %element-begin_date = if_abap_behv=>mk-on
                        %element-end_date   = if_abap_behv=>mk-on ) TO reported-travel.
      ENDIF.
      IF ls_travel-begin_date < cl_abap_context_info=>get_system_date( ) AND ls_travel-begin_date IS NOT INITIAL.
        APPEND VALUE #( %tky               = ls_travel-%tky ) TO failed-travel.

        APPEND VALUE #( %tky               = ls_travel-%tky
                        %state_area        = 'VALIDATE_DATES'
                         %msg                = NEW /dmo/cm_flight_messages(
                                                                begin_date = ls_travel-begin_date
                                                                textid = /dmo/cm_flight_messages=>begin_date_on_or_bef_sysdate
                                                                severity = if_abap_behv_message=>severity-error )
                        %element-begin_date = if_abap_behv=>mk-on ) TO reported-travel.
      ENDIF.

    ENDLOOP.
  ENDMETHOD.

  METHOD validateStatus.



    READ ENTITIES OF ZI_Travel_M_XX IN LOCAL MODE
ENTITY Travel
FIELDS (  status )
WITH CORRESPONDING #( keys )
RESULT DATA(lt_travel_result)
FAILED DATA(lt_failed).

    LOOP AT lt_travel_result INTO DATA(ls_travel_result).
      CASE ls_travel_result-status.
        WHEN 'O'.  " Open
        WHEN 'X'.  " Cancelled
        WHEN 'A'.  " Accepted

        WHEN OTHERS.

          APPEND VALUE #( %tky = ls_travel_result-%tky ) TO failed-travel.

          APPEND VALUE #( %tky = ls_travel_result-%tky
                          %msg = new_message_with_text(
                                   severity = if_abap_behv_message=>severity-error
                                   text     = 'Invalid Status'
                                 )
                          %element-status = if_abap_behv=>mk-on ) TO reported-travel.
      ENDCASE.

    ENDLOOP.
  ENDMETHOD.



  METHOD earlynumbering_create.



    " Mapping for already assigned travel IDs (e.g. during draft activation)
    mapped-travel = VALUE #( FOR entity IN entities WHERE ( travel_id IS NOT INITIAL )
                                                          ( %cid      = entity-%cid
                                                            %is_draft = entity-%is_draft
                                                            %key      = entity-%key ) ).

    " This should be a number range. But for the demo purpose, avoiding the need to configure this in each and every system, we select the max value ...
    SELECT MAX( travel_id ) FROM /dmo/travel INTO @DATA(max_travel_id).
    SELECT MAX( travel_id ) FROM zdtravel_xx INTO @DATA(max_d_travel_id).

    IF max_d_travel_id > max_travel_id.  max_travel_id = max_d_travel_id.  ENDIF.

    " Mapping for newly assigned travel IDs
    mapped-travel = VALUE #( BASE mapped-travel FOR entity IN entities INDEX INTO i
                                                    USING KEY entity
                                                    WHERE ( travel_id IS INITIAL )
                                                          ( %cid      = entity-%cid
                                                            %is_draft = entity-%is_draft
                                                            travel_id  = max_travel_id + i ) ).

  ENDMETHOD.

  METHOD earlynumbering_cba_Booking.

    DATA: max_booking_id TYPE /dmo/booking_id.

    READ ENTITIES OF zi_travel_m_XX IN LOCAL MODE
      ENTITY Travel BY \_Booking
        FIELDS ( booking_id )
          WITH CORRESPONDING #( entities )
          RESULT DATA(bookings)
          FAILED failed.

    LOOP AT entities INTO DATA(entity).
      CLEAR: max_booking_id.
      LOOP AT bookings INTO DATA(booking) USING KEY draft WHERE %is_draft = entity-%is_draft
                                                          AND   travel_id  = entity-Travel_id.
        IF booking-Booking_id > max_booking_id.  max_booking_id = booking-Booking_id.  ENDIF.
      ENDLOOP.
      " Map bookings that already have a BookingID.
      LOOP AT entity-%target INTO DATA(already_mapped_target) WHERE Booking_id IS NOT INITIAL.
        APPEND CORRESPONDING #( already_mapped_target ) TO mapped-booking.
        IF already_mapped_target-Booking_id > max_booking_id.  max_booking_id = already_mapped_target-Booking_id.  ENDIF.
      ENDLOOP.
      " Map bookings with new BookingIDs.
      LOOP AT entity-%target INTO DATA(target) WHERE Booking_id IS INITIAL.
        max_booking_id += 5.
        APPEND CORRESPONDING #( target ) TO mapped-booking ASSIGNING FIELD-SYMBOL(<mapped_booking>).
        <mapped_booking>-Booking_id = max_booking_id.
      ENDLOOP.
    ENDLOOP.

  ENDMETHOD.

ENDCLASS.

CLASS lcl_save DEFINITION INHERITING FROM cl_abap_behavior_saver.

  PROTECTED SECTION.
    METHODS save_modified REDEFINITION.

ENDCLASS.

CLASS lcl_save IMPLEMENTATION.

  METHOD save_modified.

* ********************************************************************************
*
* Implements additional save
*
********************************************************************************

    DATA lt_travel_log   TYPE STANDARD TABLE OF /dmo/log_travel.
    DATA lt_travel_log_c TYPE STANDARD TABLE OF /dmo/log_travel.
    DATA lt_travel_log_u TYPE STANDARD TABLE OF /dmo/log_travel.

    " (1) Get instance data of all instances that have been created
    IF create-travel IS NOT INITIAL.
      " Creates internal table with instance data
      lt_travel_log = CORRESPONDING #( create-travel ).

      READ ENTITY zi_travel_m_xx
         FIELDS ( travel_id )
           WITH VALUE #( FOR travel IN create-travel (  %key = travel-%key ) )
         RESULT    DATA(lt_read_result1).

      READ ENTITY zi_travel_m_xx\\Travel FROM VALUE #( FOR travel IN create-travel
                              (  %key     = travel-%key
                                 %control = VALUE #( travel_id     = if_abap_behv=>mk-on


                                                                      ) ) )
             RESULT    DATA(lt_read_result2).
*                FAILED    failed
*                REPORTED  reported.


      LOOP AT lt_travel_log ASSIGNING FIELD-SYMBOL(<fs_travel_log_c>).
        <fs_travel_log_c>-changing_operation = 'CREATE'.

        " Generate time stamp
        GET TIME STAMP FIELD <fs_travel_log_c>-created_at.

        " Read travel instance data into ls_travel that includes %control structure
        READ TABLE create-travel WITH TABLE KEY entity COMPONENTS travel_id = <fs_travel_log_c>-travel_id INTO DATA(ls_travel).
        IF sy-subrc = 0.

          " If new value of the booking_fee field created
          IF ls_travel-%control-booking_fee = cl_abap_behv=>flag_changed.
            " Generate uuid as value of the change_id field
            TRY.
                <fs_travel_log_c>-change_id = cl_system_uuid=>create_uuid_x16_static( ) .
              CATCH cx_uuid_error.
                "handle exception
            ENDTRY.
            <fs_travel_log_c>-changed_field_name = 'booking_fee'.
            <fs_travel_log_c>-changed_value = ls_travel-booking_fee.
            APPEND <fs_travel_log_c> TO lt_travel_log_c.
          ENDIF.

          " If new value of the overal_status field created
          IF ls_travel-%control-status = cl_abap_behv=>flag_changed.
            " Generate uuid as value of the change_id field
            TRY.
                <fs_travel_log_c>-change_id = cl_system_uuid=>create_uuid_x16_static( ) .
              CATCH cx_uuid_error.
                "handle exception
            ENDTRY.
            <fs_travel_log_c>-changed_field_name = 'status'.
            <fs_travel_log_c>-changed_value = ls_travel-status.
            APPEND <fs_travel_log_c> TO lt_travel_log_c.
          ENDIF.

          " IF  ls_travel-%control-...

        ENDIF.

      ENDLOOP.

      " Inserts rows specified in lt_travel_log into the DB table /dmo/log_travel
      INSERT /dmo/log_travel FROM TABLE @lt_travel_log_c.

    ENDIF.


    " (2) Get instance data of all instances that have been updated during the transaction
    IF update-travel IS NOT INITIAL.
      lt_travel_log = CORRESPONDING #( update-travel ).

      READ ENTITY zi_travel_m_xx
     FIELDS ( customer_id description )
       WITH VALUE #( FOR travel IN update-travel (  %key = travel-%key ) )
     RESULT    DATA(lt_read_result).

      READ ENTITY zi_travel_m_xx FROM VALUE #( FOR travel IN update-travel
                               (  %key     = travel-%key
                                  %control = VALUE #( travel_id     = if_abap_behv=>mk-on
                                                      customer_id   = if_abap_behv=>mk-on
                                                      description   = if_abap_behv=>mk-on

                                                                       ) ) )
              RESULT    DATA(lt_read_result4).
*                FAILED    failed.
*                REPORTED  reported.

      LOOP AT update-travel ASSIGNING FIELD-SYMBOL(<fs_travel_log_u>).

        ASSIGN lt_travel_log[ travel_id = <fs_travel_log_u>-travel_id ] TO FIELD-SYMBOL(<fs_travel_db>).

        <fs_travel_db>-changing_operation = 'UPDATE'.

        " Generate time stamp
        GET TIME STAMP FIELD <fs_travel_db>-created_at.


        IF <fs_travel_log_u>-%control-customer_id = if_abap_behv=>mk-on.
          <fs_travel_db>-changed_value = <fs_travel_log_u>-customer_id.
          " Generate uuid as value of the change_id field
          TRY.
              <fs_travel_db>-change_id = cl_system_uuid=>create_uuid_x16_static( ) .
            CATCH cx_uuid_error.
              "handle exception
          ENDTRY.

          <fs_travel_db>-changed_field_name = 'customer_id'.

          APPEND <fs_travel_db> TO lt_travel_log_u.

        ENDIF.

        IF <fs_travel_log_u>-%control-description = if_abap_behv=>mk-on.
          <fs_travel_db>-changed_value = <fs_travel_log_u>-description.

          " Generate uuid as value of the change_id field
          TRY.
              <fs_travel_db>-change_id = cl_system_uuid=>create_uuid_x16_static( ) .
            CATCH cx_uuid_error.
              "handle exception
          ENDTRY.

          <fs_travel_db>-changed_field_name = 'description'.

          APPEND <fs_travel_db> TO lt_travel_log_u.

        ENDIF.

        "IF <fs_travel_log_u>-%control-...

      ENDLOOP.

      " Inserts rows specified in lt_travel_log into the DB table /dmo/log_travel
      INSERT /dmo/log_travel FROM TABLE @lt_travel_log_u.

    ENDIF.

    " (3) Get keys of all travel instances that have been deleted during the transaction
    IF delete-travel IS NOT INITIAL.
      lt_travel_log = CORRESPONDING #( delete-travel ).
      LOOP AT lt_travel_log ASSIGNING FIELD-SYMBOL(<fs_travel_log_d>).
        <fs_travel_log_d>-changing_operation = 'DELETE'.
        " Generate time stamp
        GET TIME STAMP FIELD <fs_travel_log_d>-created_at.
        " Generate uuid as value of the change_id field
        TRY.
            <fs_travel_log_d>-change_id = cl_system_uuid=>create_uuid_x16_static( ) .
          CATCH cx_uuid_error.
            "handle exception
        ENDTRY.

      ENDLOOP.

      " Inserts rows specified in lt_travel_log into the DB table /dmo/log_travel
      INSERT /dmo/log_travel FROM TABLE @lt_travel_log.

    ENDIF.

* ********************************************************************************
*
* Implements unmanaged save
*
********************************************************************************
    DATA lt_booking_db TYPE /dmo/t_booking.

    " (1) Get instance data of all instances that have been created
    IF create-booking IS NOT INITIAL.
      lt_booking_db = CORRESPONDING #( create-booking ).

      CALL FUNCTION '/DMO/FLIGHT_BOOKING_C' EXPORTING values = lt_booking_db.

    ENDIF.

    " (2) Get instance data of all instances that have been updated during the transaction
    IF update-booking IS NOT INITIAL.
      lt_booking_db = CORRESPONDING #( update-booking ).


*    READ ENTITY zi_travel_m_xx\\booking
*         FIELDS ( flight_date flight_price  currency_code connection_id )
*           WITH VALUE #( FOR travel IN update-booking (  %key = travel-%key ) )
*         RESULT    DATA(lt_read_result).


      " Read all field values from database
      SELECT * FROM /dmo/booking FOR ALL ENTRIES IN @lt_booking_db

               WHERE booking_id  = @lt_booking_db-booking_id
               AND travel_id = @lt_booking_db-travel_id
               INTO TABLE @lt_booking_db .

      " Take over field values that have been changed during the transaction
      LOOP AT update-booking ASSIGNING FIELD-SYMBOL(<ls_unmanaged_booking>).
        ASSIGN lt_booking_db[ travel_id  = <ls_unmanaged_booking>-travel_id
                                booking_id = <ls_unmanaged_booking>-booking_id

                       ] TO FIELD-SYMBOL(<ls_booking_db>).

        IF <ls_unmanaged_booking>-%control-flight_date = if_abap_behv=>mk-on.
          <ls_booking_db>-flight_date = <ls_unmanaged_booking>-flight_date.
        ENDIF.

        IF <ls_unmanaged_booking>-%control-flight_price = if_abap_behv=>mk-on.
          <ls_booking_db>-flight_price   = <ls_unmanaged_booking>-flight_price.
        ENDIF.

        IF <ls_unmanaged_booking>-%control-currency_code = if_abap_behv=>mk-on.
          <ls_booking_db>-currency_code = <ls_unmanaged_booking>-currency_code.
        ENDIF.

        IF <ls_unmanaged_booking>-%control-connection_id = if_abap_behv=>mk-on.
          <ls_booking_db>-connection_id = <ls_unmanaged_booking>-connection_id.
        ENDIF.

      ENDLOOP.

      " Update the complete instance data
      CALL FUNCTION '/DMO/FLIGHT_BOOKING_U' EXPORTING values = lt_booking_db .

    ENDIF.

    " (3) Get keys of all travel instances that have been deleted during the transaction
    IF delete-booking IS NOT INITIAL.
      lt_booking_db = CORRESPONDING #( delete-booking ).

      CALL FUNCTION '/DMO/FLIGHT_BOOKING_D' EXPORTING values = lt_booking_db .

    ENDIF.



  ENDMETHOD.

ENDCLASS.


Booking Class:

CLASS lhc_travel DEFINITION INHERITING FROM cl_abap_behavior_handler.

  PRIVATE SECTION.
    METHODS get_features FOR FEATURES IMPORTING keys REQUEST requested_features FOR booking RESULT result.

    METHODS calculate_total_flight_price FOR DETERMINATION booking~calculateTotalFlightPrice
      IMPORTING keys FOR booking.
*    METHODS acceptTravel FOR MODIFY
*      IMPORTING keys FOR ACTION booking~acceptTravel RESULT result.




ENDCLASS.

CLASS lhc_travel IMPLEMENTATION.



  METHOD get_features.

    READ ENTITIES OF ZI_Travel_M_XX IN LOCAL MODE
       ENTITY Booking
         FIELDS ( carrier_id )
         WITH CORRESPONDING #( keys )
       RESULT DATA(lt_booking_result)
       FAILED failed.



    result = VALUE #( FOR ls_booking IN lt_booking_result
                       (  %tky                      = ls_booking-%tky
                         %field-booking_id   = COND #( WHEN ls_booking-booking_id IS NOT INITIAL
                                                          THEN if_abap_behv=>fc-f-read_only
                                                          ELSE if_abap_behv=>fc-f-unrestricted )
                         %field-booking_date = COND #( WHEN ls_booking-booking_date IS NOT INITIAL
                                                          THEN if_abap_behv=>fc-f-read_only
                                                          ELSE if_abap_behv=>fc-f-unrestricted )
                         %field-customer_id  = COND #( WHEN ls_booking-carrier_id = 'AA'
                                                          THEN if_abap_behv=>fc-f-read_only
                                                          ELSE if_abap_behv=>fc-f-unrestricted  )
                      ) ).

  ENDMETHOD.

  METHOD calculate_total_flight_price.

    TYPES: BEGIN OF ty_amount_per_currencycode,
             amount        TYPE /dmo/total_price,
             currency_code TYPE /dmo/currency_code,
           END OF ty_amount_per_currencycode.

    DATA: amount_per_currencycode TYPE STANDARD TABLE OF ty_amount_per_currencycode.


    " Read all relevant travel instances.
    READ ENTITIES OF zi_travel_m_xx IN LOCAL MODE
         ENTITY Travel
            FIELDS ( booking_fee currency_code )
            WITH CORRESPONDING #( keys )
         RESULT DATA(lt_travel).


    DELETE lt_travel WHERE currency_code IS INITIAL.

    LOOP AT lt_travel ASSIGNING FIELD-SYMBOL(<fs_travel>).
      " Set the start for the calculation by adding the booking fee.
      amount_per_currencycode = VALUE #( ( amount        = <fs_travel>-booking_fee
                                           currency_code = <fs_travel>-currency_code ) ).

      " Read all associated bookings and add them to the total price.
      READ ENTITIES OF zi_travel_m_xx IN LOCAL MODE
        ENTITY Travel BY \_Booking
          FIELDS ( flight_price currency_code )
        WITH VALUE #( ( %tky = <fs_travel>-%tky ) )
        RESULT DATA(lt_booking).

      LOOP AT lt_booking INTO DATA(booking) WHERE currency_code IS NOT INITIAL.
        COLLECT VALUE ty_amount_per_currencycode( amount        = booking-flight_price
                                                  currency_code = booking-currency_code ) INTO amount_per_currencycode.
      ENDLOOP.



      CLEAR <fs_travel>-total_price.
      LOOP AT amount_per_currencycode INTO DATA(single_amount_per_currencycode).
        " If needed do a Currency Conversion
        IF single_amount_per_currencycode-currency_code = <fs_travel>-currency_code.
          <fs_travel>-total_price += single_amount_per_currencycode-amount.
        ELSE.
          TRY  .
              /dmo/cl_flight_amdp=>convert_currency(
                 EXPORTING
                   iv_amount                   =  single_amount_per_currencycode-amount
                   iv_currency_code_source     =  single_amount_per_currencycode-currency_code
                   iv_currency_code_target     =  <fs_travel>-currency_code
                   iv_exchange_rate_date       =  cl_abap_context_info=>get_system_date( )
                 IMPORTING
                   ev_amount                   = DATA(total_booking_price_per_curr)
                ).
            CATCH cx_amdp_execution_failed.

          ENDTRY.
          <fs_travel>-total_price += total_booking_price_per_curr.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

    " write back the modified total_price of travels
    MODIFY ENTITIES OF ZI_TRAVEl_M_XX IN LOCAL MODE
      ENTITY travel
        UPDATE FIELDS ( total_price )
        WITH CORRESPONDING #( lt_travel ).

  ENDMETHOD.


*  METHOD acceptTravel.
*  ENDMETHOD.

ENDCLASS.
